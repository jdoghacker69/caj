
Exercise1Again.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800053c  0800053c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800053c  0800053c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800053c  0800053c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800053c  0800053c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800053c  0800053c  0000153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000540  08000540  00001540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000544  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000028  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e75  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003f3  00000000  00000000  00002ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e0  00000000  00000000  000032a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000094  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e49  00000000  00000000  00003414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ebb  00000000  00000000  0001825d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000727a6  00000000  00000000  00019118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008b8be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  0008b904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0008bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000524 	.word	0x08000524

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000524 	.word	0x08000524

080001d4 <dio_init>:
// Current state of the LEDs (bitmask for PE8–PE15)
static uint8_t led_state = 0x00;


void dio_init(void (*button_callback)(void))
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    btn_callback = button_callback;
 80001dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000218 <dio_init+0x44>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	6013      	str	r3, [r2, #0]

    // Enable clocks for GPIOA, GPIOC, GPIOE, and SYSCFG
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001e2:	4b0e      	ldr	r3, [pc, #56]	@ (800021c <dio_init+0x48>)
 80001e4:	695b      	ldr	r3, [r3, #20]
 80001e6:	4a0d      	ldr	r2, [pc, #52]	@ (800021c <dio_init+0x48>)
 80001e8:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80001ec:	6153      	str	r3, [r2, #20]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80001ee:	4b0b      	ldr	r3, [pc, #44]	@ (800021c <dio_init+0x48>)
 80001f0:	699b      	ldr	r3, [r3, #24]
 80001f2:	4a0a      	ldr	r2, [pc, #40]	@ (800021c <dio_init+0x48>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6193      	str	r3, [r2, #24]

    // Configure PE8–PE15 as general-purpose outputs (MODER = 01b per pin)
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001fa:	4b09      	ldr	r3, [pc, #36]	@ (8000220 <dio_init+0x4c>)
 80001fc:	60fb      	str	r3, [r7, #12]
    *led_output_registers = 0x5555;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000204:	801a      	strh	r2, [r3, #0]

    // Set initial LED pattern
    dio_set_leds(led_state);
 8000206:	4b07      	ldr	r3, [pc, #28]	@ (8000224 <dio_init+0x50>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f80c 	bl	8000228 <dio_set_leds>
}
 8000210:	bf00      	nop
 8000212:	3710      	adds	r7, #16
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	20000020 	.word	0x20000020
 800021c:	40021000 	.word	0x40021000
 8000220:	48001002 	.word	0x48001002
 8000224:	20000024 	.word	0x20000024

08000228 <dio_set_leds>:


void dio_set_leds(uint8_t pattern)
{
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	led_state = pattern;  // Set the current LED state to the new pattern (8-bit bitmask for the LEDs)
 8000232:	4a07      	ldr	r2, [pc, #28]	@ (8000250 <dio_set_leds+0x28>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	7013      	strb	r3, [r2, #0]

	uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;  // Get the address of the GPIOE output data register (ODR), and offset by 1 to access the appropriate bits for PE8-PE15
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <dio_set_leds+0x2c>)
 800023a:	60fb      	str	r3, [r7, #12]

	*led_output = led_state;  // Write the current LED state (pattern) to the GPIOE output register, updating the LEDs
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <dio_set_leds+0x28>)
 800023e:	781a      	ldrb	r2, [r3, #0]
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	701a      	strb	r2, [r3, #0]
}
 8000244:	bf00      	nop
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	20000024 	.word	0x20000024
 8000254:	48001015 	.word	0x48001015

08000258 <dio_chase_led_limited>:
    return led_state;
}


void dio_chase_led_limited(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	if (led_update_allowed) {  // Check if the timer has granted permission to update the LED pattern
 800025c:	4b0d      	ldr	r3, [pc, #52]	@ (8000294 <dio_chase_led_limited+0x3c>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	2b00      	cmp	r3, #0
 8000264:	d014      	beq.n	8000290 <dio_chase_led_limited+0x38>
	    led_update_allowed = 0;  // Consume the permission (set flag to 0 so that next update must wait for the timer)
 8000266:	4b0b      	ldr	r3, [pc, #44]	@ (8000294 <dio_chase_led_limited+0x3c>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]

	    led_state <<= 1;  // Shift the current LED pattern one position to the left (move the "lit" LED to the next position)
 800026c:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <dio_chase_led_limited+0x40>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	b2da      	uxtb	r2, r3
 8000274:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <dio_chase_led_limited+0x40>)
 8000276:	701a      	strb	r2, [r3, #0]

	    if (led_state == 0) {  // Check if the shifted LED pattern has reached zero (i.e., all LEDs are off)
 8000278:	4b07      	ldr	r3, [pc, #28]	@ (8000298 <dio_chase_led_limited+0x40>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d102      	bne.n	8000286 <dio_chase_led_limited+0x2e>
	        led_state = 0x01;  // If all LEDs are off, restart from the first LED (PE8) by setting the first bit
 8000280:	4b05      	ldr	r3, [pc, #20]	@ (8000298 <dio_chase_led_limited+0x40>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
	    }

	    dio_set_leds(led_state);  // Update the actual LEDs with the new pattern (display the new "lit" LED)
 8000286:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <dio_chase_led_limited+0x40>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	4618      	mov	r0, r3
 800028c:	f7ff ffcc 	bl	8000228 <dio_set_leds>
	}
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000000 	.word	0x20000000
 8000298:	20000024 	.word	0x20000024

0800029c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	// Check if a user-defined button handler has been set (callback is not null)
    if (btn_callback != 0x00) {
 80002a0:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <EXTI0_IRQHandler+0x24>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d002      	beq.n	80002ae <EXTI0_IRQHandler+0x12>
        btn_callback();  // Call user-defined button handler
 80002a8:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <EXTI0_IRQHandler+0x24>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4798      	blx	r3
    }

    EXTI->PR |= EXTI_PR_PR0;  // Clear EXTI line 0 pending bit
 80002ae:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <EXTI0_IRQHandler+0x28>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a04      	ldr	r2, [pc, #16]	@ (80002c4 <EXTI0_IRQHandler+0x28>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6153      	str	r3, [r2, #20]
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000020 	.word	0x20000020
 80002c4:	40010400 	.word	0x40010400

080002c8 <my_button_handler>:
/* Button interrupt handler.
 * This function is called when the button is pressed.
 * It calls dio_chase_led_limited() to shift the LED if the timer allows.
 */
void my_button_handler(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	//dio_chase_led();  // Move the lit LED left

	// Attempt to move the lit LED to the next position
    dio_chase_led_limited();
 80002cc:	f7ff ffc4 	bl	8000258 <dio_chase_led_limited>
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <main>:

int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	// Initialise the diode module and register the button handler as the callback
	dio_init(my_button_handler);    // Set up LEDs
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <main+0x14>)
 80002da:	f7ff ff7b 	bl	80001d4 <dio_init>
	timer_init();     				// Set up EXTI0 + timer
 80002de:	f000 f859 	bl	8000394 <timer_init>

    // Main loop: the program runs here forever after initialisation
    while (1)
 80002e2:	bf00      	nop
 80002e4:	e7fd      	b.n	80002e2 <main+0xe>
 80002e6:	bf00      	nop
 80002e8:	080002c9 	.word	0x080002c9

080002ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	db0b      	blt.n	8000316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	f003 021f 	and.w	r2, r3, #31
 8000304:	4907      	ldr	r1, [pc, #28]	@ (8000324 <__NVIC_EnableIRQ+0x38>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	095b      	lsrs	r3, r3, #5
 800030c:	2001      	movs	r0, #1
 800030e:	fa00 f202 	lsl.w	r2, r0, r2
 8000312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000e100 	.word	0xe000e100

08000328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	6039      	str	r1, [r7, #0]
 8000332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000338:	2b00      	cmp	r3, #0
 800033a:	db0a      	blt.n	8000352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	b2da      	uxtb	r2, r3
 8000340:	490c      	ldr	r1, [pc, #48]	@ (8000374 <__NVIC_SetPriority+0x4c>)
 8000342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000346:	0112      	lsls	r2, r2, #4
 8000348:	b2d2      	uxtb	r2, r2
 800034a:	440b      	add	r3, r1
 800034c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000350:	e00a      	b.n	8000368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4908      	ldr	r1, [pc, #32]	@ (8000378 <__NVIC_SetPriority+0x50>)
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	f003 030f 	and.w	r3, r3, #15
 800035e:	3b04      	subs	r3, #4
 8000360:	0112      	lsls	r2, r2, #4
 8000362:	b2d2      	uxtb	r2, r2
 8000364:	440b      	add	r3, r1
 8000366:	761a      	strb	r2, [r3, #24]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	e000e100 	.word	0xe000e100
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <timer_tick_handler>:
/*
 * Timer callback function.
 * Called on every timer tick to enable the next LED update.
 */
static void timer_tick_handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
    led_update_allowed = 1;
 8000380:	4b03      	ldr	r3, [pc, #12]	@ (8000390 <timer_tick_handler+0x14>)
 8000382:	2201      	movs	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	20000000 	.word	0x20000000

08000394 <timer_init>:

void timer_init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    // Configure EXTI line 0 for PA0 (button input)
    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;  // Route EXTI0 to PA0
 8000398:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <timer_init+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
    EXTI->RTSR |= EXTI_RTSR_TR0;                 // Rising edge trigger
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <timer_init+0x44>)
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <timer_init+0x44>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= EXTI_IMR_MR0;                  // Unmask interrupt
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <timer_init+0x44>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <timer_init+0x44>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(EXTI0_IRQn, 1);             // Set interrupt priority
 80003b6:	2101      	movs	r1, #1
 80003b8:	2006      	movs	r0, #6
 80003ba:	f7ff ffb5 	bl	8000328 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);                  // Enable EXTI0 interrupt
 80003be:	2006      	movs	r0, #6
 80003c0:	f7ff ff94 	bl	80002ec <__NVIC_EnableIRQ>

    // Initialise timer and register the timer callback
    timer2_init();
 80003c4:	f000 f80c 	bl	80003e0 <timer2_init>
    timer2_set_callback(timer_tick_handler);
 80003c8:	4804      	ldr	r0, [pc, #16]	@ (80003dc <timer_init+0x48>)
 80003ca:	f000 f837 	bl	800043c <timer2_set_callback>
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40010000 	.word	0x40010000
 80003d8:	40010400 	.word	0x40010400
 80003dc:	0800037d 	.word	0x0800037d

080003e0 <timer2_init>:

void timer2_init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003e4:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <timer2_init+0x58>)
 80003e6:	69db      	ldr	r3, [r3, #28]
 80003e8:	4a13      	ldr	r2, [pc, #76]	@ (8000438 <timer2_init+0x58>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	61d3      	str	r3, [r2, #28]
    TIM2->PSC = 7199;
 80003f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80003f8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 2000;
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000402:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 8000404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000414:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(TIM2_IRQn, 2);
 8000424:	2102      	movs	r1, #2
 8000426:	201c      	movs	r0, #28
 8000428:	f7ff ff7e 	bl	8000328 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 800042c:	201c      	movs	r0, #28
 800042e:	f7ff ff5d 	bl	80002ec <__NVIC_EnableIRQ>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <timer2_set_callback>:

void timer2_set_callback(void (*callback)(void))
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
    timer2_callback = callback;
 8000444:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <timer2_set_callback+0x1c>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6013      	str	r3, [r2, #0]
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000028 	.word	0x20000028

0800045c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
    TIM2->SR &= ~TIM_SR_UIF;
 8000460:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000464:	691b      	ldr	r3, [r3, #16]
 8000466:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800046a:	f023 0301 	bic.w	r3, r3, #1
 800046e:	6113      	str	r3, [r2, #16]

    if (timer2_callback != 0) {
 8000470:	4b04      	ldr	r3, [pc, #16]	@ (8000484 <TIM2_IRQHandler+0x28>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d002      	beq.n	800047e <TIM2_IRQHandler+0x22>
        timer2_callback();
 8000478:	4b02      	ldr	r3, [pc, #8]	@ (8000484 <TIM2_IRQHandler+0x28>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4798      	blx	r3
    }
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000028 	.word	0x20000028

08000488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000488:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800048c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000490:	480c      	ldr	r0, [pc, #48]	@ (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000492:	490d      	ldr	r1, [pc, #52]	@ (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000494:	4a0d      	ldr	r2, [pc, #52]	@ (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	@ (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a8:	4c0a      	ldr	r4, [pc, #40]	@ (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b6:	f000 f811 	bl	80004dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ba:	f7ff ff0b 	bl	80002d4 <main>

080004be <LoopForever>:

LoopForever:
    b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
  ldr   r0, =_estack
 80004c0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004cc:	08000544 	.word	0x08000544
  ldr r2, =_sbss
 80004d0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004d4:	2000002c 	.word	0x2000002c

080004d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_2_IRQHandler>
	...

080004dc <__libc_init_array>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	4d0d      	ldr	r5, [pc, #52]	@ (8000514 <__libc_init_array+0x38>)
 80004e0:	4c0d      	ldr	r4, [pc, #52]	@ (8000518 <__libc_init_array+0x3c>)
 80004e2:	1b64      	subs	r4, r4, r5
 80004e4:	10a4      	asrs	r4, r4, #2
 80004e6:	2600      	movs	r6, #0
 80004e8:	42a6      	cmp	r6, r4
 80004ea:	d109      	bne.n	8000500 <__libc_init_array+0x24>
 80004ec:	4d0b      	ldr	r5, [pc, #44]	@ (800051c <__libc_init_array+0x40>)
 80004ee:	4c0c      	ldr	r4, [pc, #48]	@ (8000520 <__libc_init_array+0x44>)
 80004f0:	f000 f818 	bl	8000524 <_init>
 80004f4:	1b64      	subs	r4, r4, r5
 80004f6:	10a4      	asrs	r4, r4, #2
 80004f8:	2600      	movs	r6, #0
 80004fa:	42a6      	cmp	r6, r4
 80004fc:	d105      	bne.n	800050a <__libc_init_array+0x2e>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	f855 3b04 	ldr.w	r3, [r5], #4
 8000504:	4798      	blx	r3
 8000506:	3601      	adds	r6, #1
 8000508:	e7ee      	b.n	80004e8 <__libc_init_array+0xc>
 800050a:	f855 3b04 	ldr.w	r3, [r5], #4
 800050e:	4798      	blx	r3
 8000510:	3601      	adds	r6, #1
 8000512:	e7f2      	b.n	80004fa <__libc_init_array+0x1e>
 8000514:	0800053c 	.word	0x0800053c
 8000518:	0800053c 	.word	0x0800053c
 800051c:	0800053c 	.word	0x0800053c
 8000520:	08000540 	.word	0x08000540

08000524 <_init>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr

08000530 <_fini>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	bf00      	nop
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr
