
MTRX2700 C Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005d0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000764  08000764  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000764  08000764  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000764  08000764  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000764  08000764  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000764  08000764  00001764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000768  08000768  00001768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800076c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000070  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d54  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000470  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  000031f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b4  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e29  00000000  00000000  000033b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011e6  00000000  00000000  000181dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000727f9  00000000  00000000  000193c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008bbbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002fc  00000000  00000000  0008bc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0008befc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800074c 	.word	0x0800074c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800074c 	.word	0x0800074c

080001d4 <enable_led_clock>:
// variables.
static uint8_t led_mask_pattern = 0b11111111;
static uint8_t led_mask_pattern_left = 0b11110000;
static uint8_t *led_output_register;

void enable_led_clock(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <enable_led_clock+0x1c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <enable_led_clock+0x1c>)
 80001de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001e2:	6153      	str	r3, [r2, #20]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000

080001f4 <initialise_leds>:

// enables the leds.
void initialise_leds(void) {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
    uint16_t *moder_upper = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001fa:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <initialise_leds+0x24>)
 80001fc:	607b      	str	r3, [r7, #4]
    *moder_upper = 0x5555;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000204:	801a      	strh	r2, [r3, #0]
    led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000206:	4b05      	ldr	r3, [pc, #20]	@ (800021c <initialise_leds+0x28>)
 8000208:	4a05      	ldr	r2, [pc, #20]	@ (8000220 <initialise_leds+0x2c>)
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	48001002 	.word	0x48001002
 800021c:	20000020 	.word	0x20000020
 8000220:	48001015 	.word	0x48001015

08000224 <led_flash>:

// flashes a bit-mask of the leds.
void led_flash(void) {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
    *led_output_register = led_mask_pattern;
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <led_flash+0x38>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a0c      	ldr	r2, [pc, #48]	@ (8000260 <led_flash+0x3c>)
 8000230:	7812      	ldrb	r2, [r2, #0]
 8000232:	701a      	strb	r2, [r3, #0]
    for (volatile int i = 0; i < 100000; ++i);
 8000234:	2300      	movs	r3, #0
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	e002      	b.n	8000240 <led_flash+0x1c>
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3301      	adds	r3, #1
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a08      	ldr	r2, [pc, #32]	@ (8000264 <led_flash+0x40>)
 8000244:	4293      	cmp	r3, r2
 8000246:	ddf8      	ble.n	800023a <led_flash+0x16>
    *led_output_register = 0x00;
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <led_flash+0x38>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	20000020 	.word	0x20000020
 8000260:	20000000 	.word	0x20000000
 8000264:	0001869f 	.word	0x0001869f

08000268 <led_blink_sequence>:

void led_blink_sequence(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
    static uint8_t pattern = 0x01;
    *led_output_register = pattern;
 800026c:	4b0b      	ldr	r3, [pc, #44]	@ (800029c <led_blink_sequence+0x34>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a0b      	ldr	r2, [pc, #44]	@ (80002a0 <led_blink_sequence+0x38>)
 8000272:	7812      	ldrb	r2, [r2, #0]
 8000274:	701a      	strb	r2, [r3, #0]
    pattern <<= 1;
 8000276:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <led_blink_sequence+0x38>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <led_blink_sequence+0x38>)
 8000280:	701a      	strb	r2, [r3, #0]
    if (pattern == 0) pattern = 0x01;
 8000282:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <led_blink_sequence+0x38>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d102      	bne.n	8000290 <led_blink_sequence+0x28>
 800028a:	4b05      	ldr	r3, [pc, #20]	@ (80002a0 <led_blink_sequence+0x38>)
 800028c:	2201      	movs	r2, #1
 800028e:	701a      	strb	r2, [r3, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000020 	.word	0x20000020
 80002a0:	20000002 	.word	0x20000002

080002a4 <led_flash_left>:

// flashes half the leds. for testing mostly.
void led_flash_left(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
    *led_output_register = led_mask_pattern_left;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <led_flash_left+0x38>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a0c      	ldr	r2, [pc, #48]	@ (80002e0 <led_flash_left+0x3c>)
 80002b0:	7812      	ldrb	r2, [r2, #0]
 80002b2:	701a      	strb	r2, [r3, #0]
    for (volatile int i = 0; i < 100000; ++i);
 80002b4:	2300      	movs	r3, #0
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	e002      	b.n	80002c0 <led_flash_left+0x1c>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3301      	adds	r3, #1
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a08      	ldr	r2, [pc, #32]	@ (80002e4 <led_flash_left+0x40>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	ddf8      	ble.n	80002ba <led_flash_left+0x16>
    *led_output_register = 0x00;
 80002c8:	4b04      	ldr	r3, [pc, #16]	@ (80002dc <led_flash_left+0x38>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	20000020 	.word	0x20000020
 80002e0:	20000001 	.word	0x20000001
 80002e4:	0001869f 	.word	0x0001869f

080002e8 <enable_core_clocks>:
#include "stm32f303xc.h"
#include "timer_module.h"
#include "led_module.h"

void enable_core_clocks(void) {
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80002ec:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <enable_core_clocks+0x1c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <enable_core_clocks+0x1c>)
 80002f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002f6:	6153      	str	r3, [r2, #20]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <main>:

int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    enable_core_clocks();
 800030c:	f7ff ffec 	bl	80002e8 <enable_core_clocks>
    enable_led_clock();
 8000310:	f7ff ff60 	bl	80001d4 <enable_led_clock>

    enable_periodic_clock();
 8000314:	f000 f8b6 	bl	8000484 <enable_periodic_clock>
    enable_oneshot_clock();
 8000318:	f000 f8c4 	bl	80004a4 <enable_oneshot_clock>

    initialise_leds();
 800031c:	f7ff ff6a 	bl	80001f4 <initialise_leds>

    // testing.
    timer_init(1000, led_blink_sequence);
 8000320:	490a      	ldr	r1, [pc, #40]	@ (800034c <main+0x44>)
 8000322:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000326:	f000 f8e3 	bl	80004f0 <timer_init>
    timer_oneshot(2000, led_flash);
 800032a:	4909      	ldr	r1, [pc, #36]	@ (8000350 <main+0x48>)
 800032c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000330:	f000 f922 	bl	8000578 <timer_oneshot>
    set_timer_period(500);
 8000334:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000338:	f000 f8c4 	bl	80004c4 <set_timer_period>
    timer_oneshot(2000, led_flash_left);
 800033c:	4905      	ldr	r1, [pc, #20]	@ (8000354 <main+0x4c>)
 800033e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000342:	f000 f919 	bl	8000578 <timer_oneshot>

    while (1) {
 8000346:	bf00      	nop
 8000348:	e7fd      	b.n	8000346 <main+0x3e>
 800034a:	bf00      	nop
 800034c:	08000269 	.word	0x08000269
 8000350:	08000225 	.word	0x08000225
 8000354:	080002a5 	.word	0x080002a5

08000358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	2b00      	cmp	r3, #0
 8000368:	db0b      	blt.n	8000382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f003 021f 	and.w	r2, r3, #31
 8000370:	4907      	ldr	r1, [pc, #28]	@ (8000390 <__NVIC_EnableIRQ+0x38>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	095b      	lsrs	r3, r3, #5
 8000378:	2001      	movs	r0, #1
 800037a:	fa00 f202 	lsl.w	r2, r0, r2
 800037e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000e100 	.word	0xe000e100

08000394 <trigger_prescaler>:
volatile uint32_t interval_ms = 0;
static void (*periodic_callback)(void) = 0;
static void (*oneshot_callback)(void) = 0;

// force updates the PSC and ARR settings.
static void trigger_prescaler(TIM_TypeDef *TIMx) {
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
    TIMx->EGR |= TIM_EGR_UG;	// update the Update Generation bit.
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f043 0201 	orr.w	r2, r3, #1
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	615a      	str	r2, [r3, #20]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <enqueue_oneshot>:

// enqueues a one-shot event if buffer is not full.
static uint32_t enqueue_oneshot(uint32_t delay_ms, void(*callback)(void)) {
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
	uint8_t next = (queue_tail + 1) % ONESHOT_QUEUE_SIZE;
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <enqueue_oneshot+0x60>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	3301      	adds	r3, #1
 80003c4:	425a      	negs	r2, r3
 80003c6:	f003 0307 	and.w	r3, r3, #7
 80003ca:	f002 0207 	and.w	r2, r2, #7
 80003ce:	bf58      	it	pl
 80003d0:	4253      	negpl	r3, r2
 80003d2:	73fb      	strb	r3, [r7, #15]

	// buffer is full.
	if (next == queue_head) {
 80003d4:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <enqueue_oneshot+0x64>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	7bfa      	ldrb	r2, [r7, #15]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d102      	bne.n	80003e4 <enqueue_oneshot+0x30>
		return -1;
 80003de:	f04f 33ff 	mov.w	r3, #4294967295
 80003e2:	e011      	b.n	8000408 <enqueue_oneshot+0x54>
	}

	// store event data at end of list and shift tail.
	oneshot_queue[queue_tail].delay_ms = delay_ms;
 80003e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000414 <enqueue_oneshot+0x60>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4619      	mov	r1, r3
 80003ea:	4a0c      	ldr	r2, [pc, #48]	@ (800041c <enqueue_oneshot+0x68>)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	oneshot_queue[queue_tail].callback = callback;
 80003f2:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <enqueue_oneshot+0x60>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4a09      	ldr	r2, [pc, #36]	@ (800041c <enqueue_oneshot+0x68>)
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4413      	add	r3, r2
 80003fc:	683a      	ldr	r2, [r7, #0]
 80003fe:	605a      	str	r2, [r3, #4]
	queue_tail = next;
 8000400:	4a04      	ldr	r2, [pc, #16]	@ (8000414 <enqueue_oneshot+0x60>)
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	7013      	strb	r3, [r2, #0]

	return 0;
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	3714      	adds	r7, #20
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	20000065 	.word	0x20000065
 8000418:	20000064 	.word	0x20000064
 800041c:	20000024 	.word	0x20000024

08000420 <dequeue_oneshot>:

// pushes to the next one-shot event if buffer is not empty.
static uint32_t dequeue_oneshot(OneShotEvent *event) {
 8000420:	b490      	push	{r4, r7}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	// buffer is empty.
	if (queue_head == queue_tail) {
 8000428:	4b13      	ldr	r3, [pc, #76]	@ (8000478 <dequeue_oneshot+0x58>)
 800042a:	781a      	ldrb	r2, [r3, #0]
 800042c:	4b13      	ldr	r3, [pc, #76]	@ (800047c <dequeue_oneshot+0x5c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	429a      	cmp	r2, r3
 8000432:	d102      	bne.n	800043a <dequeue_oneshot+0x1a>
		return -1;
 8000434:	f04f 33ff 	mov.w	r3, #4294967295
 8000438:	e018      	b.n	800046c <dequeue_oneshot+0x4c>
	}

	// push event to run and advance queue.
	*event = oneshot_queue[queue_head];
 800043a:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <dequeue_oneshot+0x58>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	6879      	ldr	r1, [r7, #4]
 8000440:	4a0f      	ldr	r2, [pc, #60]	@ (8000480 <dequeue_oneshot+0x60>)
 8000442:	460c      	mov	r4, r1
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	4413      	add	r3, r2
 8000448:	e893 0003 	ldmia.w	r3, {r0, r1}
 800044c:	e884 0003 	stmia.w	r4, {r0, r1}
	queue_head = (queue_head + 1) % ONESHOT_QUEUE_SIZE;
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <dequeue_oneshot+0x58>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	425a      	negs	r2, r3
 8000458:	f003 0307 	and.w	r3, r3, #7
 800045c:	f002 0207 	and.w	r2, r2, #7
 8000460:	bf58      	it	pl
 8000462:	4253      	negpl	r3, r2
 8000464:	b2da      	uxtb	r2, r3
 8000466:	4b04      	ldr	r3, [pc, #16]	@ (8000478 <dequeue_oneshot+0x58>)
 8000468:	701a      	strb	r2, [r3, #0]

	return 0;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bc90      	pop	{r4, r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000064 	.word	0x20000064
 800047c:	20000065 	.word	0x20000065
 8000480:	20000024 	.word	0x20000024

08000484 <enable_periodic_clock>:

void enable_periodic_clock(void) {
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000488:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <enable_periodic_clock+0x1c>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	4a04      	ldr	r2, [pc, #16]	@ (80004a0 <enable_periodic_clock+0x1c>)
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	61d3      	str	r3, [r2, #28]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <enable_oneshot_clock>:

void enable_oneshot_clock(void) {
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80004a8:	4b05      	ldr	r3, [pc, #20]	@ (80004c0 <enable_oneshot_clock+0x1c>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	4a04      	ldr	r2, [pc, #16]	@ (80004c0 <enable_oneshot_clock+0x1c>)
 80004ae:	f043 0302 	orr.w	r3, r3, #2
 80004b2:	61d3      	str	r3, [r2, #28]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <set_timer_period>:

void set_timer_period(uint32_t new_ms) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	interval_ms = new_ms;
 80004cc:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <set_timer_period+0x28>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6013      	str	r3, [r2, #0]
	TIM2->ARR = interval_ms;	// updates time delay value.
 80004d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d6:	4b05      	ldr	r3, [pc, #20]	@ (80004ec <set_timer_period+0x28>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	62d3      	str	r3, [r2, #44]	@ 0x2c
	trigger_prescaler(TIM2);	// force updates PSC and ARR.
 80004dc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004e0:	f7ff ff58 	bl	8000394 <trigger_prescaler>
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000068 	.word	0x20000068

080004f0 <timer_init>:

uint32_t get_timer_period(void) {
	return interval_ms;
}

void timer_init(uint32_t ms, void (*callback)(void)) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
    periodic_callback = callback;
 80004fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000574 <timer_init+0x84>)
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	6013      	str	r3, [r2, #0]

    TIM2->CR1 &= ~TIM_CR1_CEN;	// disables the counter.
 8000500:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800050a:	f023 0301 	bic.w	r3, r3, #1
 800050e:	6013      	str	r3, [r2, #0]

    // timing.
    TIM2->PSC = 7999;			// PSC = 8MHz / (7999+1) = 1kHz.
 8000510:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000514:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000518:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = ms - 1;			// set time delay value.
 800051a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3b01      	subs	r3, #1
 8000522:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CNT = 0;				// reset timer counter value.
 8000524:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000528:	2200      	movs	r2, #0
 800052a:	625a      	str	r2, [r3, #36]	@ 0x24
    trigger_prescaler(TIM2);	// force updates PSC and ARR.
 800052c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000530:	f7ff ff30 	bl	8000394 <trigger_prescaler>

    // interrupts.
    TIM2->SR &= ~TIM_SR_UIF;	// clear active update interrupt flag.
 8000534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000538:	691b      	ldr	r3, [r3, #16]
 800053a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800053e:	f023 0301 	bic.w	r3, r3, #1
 8000542:	6113      	str	r3, [r2, #16]
    TIM2->DIER |= TIM_DIER_UIE;	// enable update interrupts.
 8000544:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);	// enable TIM2 interrupts in NVIC.
 8000554:	201c      	movs	r0, #28
 8000556:	f7ff feff 	bl	8000358 <__NVIC_EnableIRQ>

    TIM2->CR1 |= TIM_CR1_CEN;	// re-enable the counter.
 800055a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6013      	str	r3, [r2, #0]
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000006c 	.word	0x2000006c

08000578 <timer_oneshot>:

void timer_oneshot(uint32_t ms, void(*callback)(void)) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
    // if one-shot event already active, queue as new item.
	if (oneshot_active) {
 8000582:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <timer_oneshot+0x80>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d004      	beq.n	8000594 <timer_oneshot+0x1c>
        enqueue_oneshot(ms, callback);
 800058a:	6839      	ldr	r1, [r7, #0]
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ff11 	bl	80003b4 <enqueue_oneshot>
        return;
 8000592:	e02e      	b.n	80005f2 <timer_oneshot+0x7a>
    }

    oneshot_callback = callback;
 8000594:	4a19      	ldr	r2, [pc, #100]	@ (80005fc <timer_oneshot+0x84>)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	6013      	str	r3, [r2, #0]
    oneshot_active = 1;
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <timer_oneshot+0x80>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]

    TIM3->CR1 &= ~TIM_CR1_CEN;	// disable the counter.
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <timer_oneshot+0x88>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a16      	ldr	r2, [pc, #88]	@ (8000600 <timer_oneshot+0x88>)
 80005a6:	f023 0301 	bic.w	r3, r3, #1
 80005aa:	6013      	str	r3, [r2, #0]

    // timing.
    TIM3->PSC = 7999;			// PSC = 1kHz.
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <timer_oneshot+0x88>)
 80005ae:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80005b2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = ms - 1;			// set time delay value.
 80005b4:	4a12      	ldr	r2, [pc, #72]	@ (8000600 <timer_oneshot+0x88>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM3->CNT = 0;				// reset timer counter value.
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <timer_oneshot+0x88>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	@ 0x24
    trigger_prescaler(TIM3);	// force updates PSC and ARR.
 80005c2:	480f      	ldr	r0, [pc, #60]	@ (8000600 <timer_oneshot+0x88>)
 80005c4:	f7ff fee6 	bl	8000394 <trigger_prescaler>

    // interrupts.
    TIM3->SR &= ~TIM_SR_UIF;	// clear active update interrupt flags.
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <timer_oneshot+0x88>)
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000600 <timer_oneshot+0x88>)
 80005ce:	f023 0301 	bic.w	r3, r3, #1
 80005d2:	6113      	str	r3, [r2, #16]
    TIM3->DIER |= TIM_DIER_UIE;	// enable update interrupts.
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <timer_oneshot+0x88>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	4a09      	ldr	r2, [pc, #36]	@ (8000600 <timer_oneshot+0x88>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM3_IRQn);	// enable TIM3 interrupts in NVIC.
 80005e0:	201d      	movs	r0, #29
 80005e2:	f7ff feb9 	bl	8000358 <__NVIC_EnableIRQ>

    TIM3->CR1 |= TIM_CR1_CEN;	// re-enable the counter.
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <timer_oneshot+0x88>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a05      	ldr	r2, [pc, #20]	@ (8000600 <timer_oneshot+0x88>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000066 	.word	0x20000066
 80005fc:	20000070 	.word	0x20000070
 8000600:	40000400 	.word	0x40000400

08000604 <TIM2_IRQHandler>:

// TIM2 interrupt handler. handles periodic timer completion.
void TIM2_IRQHandler(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {	// check if update interrupt occurred.
 8000608:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	2b00      	cmp	r3, #0
 8000614:	d00e      	beq.n	8000634 <TIM2_IRQHandler+0x30>
        TIM2->SR &= ~TIM_SR_UIF;	// clear active update interrupt flags.
 8000616:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	6113      	str	r3, [r2, #16]

        if (periodic_callback) {
 8000626:	4b04      	ldr	r3, [pc, #16]	@ (8000638 <TIM2_IRQHandler+0x34>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <TIM2_IRQHandler+0x30>
            periodic_callback();	// call user-defined function.
 800062e:	4b02      	ldr	r3, [pc, #8]	@ (8000638 <TIM2_IRQHandler+0x34>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4798      	blx	r3
        }
    }
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000006c 	.word	0x2000006c

0800063c <TIM3_IRQHandler>:

// TIM3 interrupt handler. handles one-shot timer completion.
void TIM3_IRQHandler(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {	// check if update interrupt occurred.
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <TIM3_IRQHandler+0x68>)
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d025      	beq.n	800069a <TIM3_IRQHandler+0x5e>
        TIM3->SR &= ~TIM_SR_UIF;	// clear active update interrupt flags.
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <TIM3_IRQHandler+0x68>)
 8000650:	691b      	ldr	r3, [r3, #16]
 8000652:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <TIM3_IRQHandler+0x68>)
 8000654:	f023 0301 	bic.w	r3, r3, #1
 8000658:	6113      	str	r3, [r2, #16]

        TIM3->CR1 &= ~TIM_CR1_CEN;	// disable the counter.
 800065a:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <TIM3_IRQHandler+0x68>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a11      	ldr	r2, [pc, #68]	@ (80006a4 <TIM3_IRQHandler+0x68>)
 8000660:	f023 0301 	bic.w	r3, r3, #1
 8000664:	6013      	str	r3, [r2, #0]
		oneshot_active = 0;			// note one-shot event completed.
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <TIM3_IRQHandler+0x6c>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]

        if (oneshot_callback) {
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <TIM3_IRQHandler+0x70>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d005      	beq.n	8000680 <TIM3_IRQHandler+0x44>
            oneshot_callback();		// call user-defined function.
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <TIM3_IRQHandler+0x70>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4798      	blx	r3
            oneshot_callback = 0;	// clear the function pointer.
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <TIM3_IRQHandler+0x70>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
        }

        // triggers next one-shot in queue if it exists.
        OneShotEvent next;
        if (dequeue_oneshot(&next) == 0) {
 8000680:	463b      	mov	r3, r7
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fecc 	bl	8000420 <dequeue_oneshot>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d105      	bne.n	800069a <TIM3_IRQHandler+0x5e>
            timer_oneshot(next.delay_ms, next.callback);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff6f 	bl	8000578 <timer_oneshot>
        }
    }
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40000400 	.word	0x40000400
 80006a8:	20000066 	.word	0x20000066
 80006ac:	20000070 	.word	0x20000070

080006b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b0:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	@ (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	@ (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006de:	f000 f811 	bl	8000704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e2:	f7ff fe11 	bl	8000308 <main>

080006e6 <LoopForever>:

LoopForever:
    b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   r0, =_estack
 80006e8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006f4:	0800076c 	.word	0x0800076c
  ldr r2, =_sbss
 80006f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006fc:	20000074 	.word	0x20000074

08000700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_2_IRQHandler>
	...

08000704 <__libc_init_array>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	4d0d      	ldr	r5, [pc, #52]	@ (800073c <__libc_init_array+0x38>)
 8000708:	4c0d      	ldr	r4, [pc, #52]	@ (8000740 <__libc_init_array+0x3c>)
 800070a:	1b64      	subs	r4, r4, r5
 800070c:	10a4      	asrs	r4, r4, #2
 800070e:	2600      	movs	r6, #0
 8000710:	42a6      	cmp	r6, r4
 8000712:	d109      	bne.n	8000728 <__libc_init_array+0x24>
 8000714:	4d0b      	ldr	r5, [pc, #44]	@ (8000744 <__libc_init_array+0x40>)
 8000716:	4c0c      	ldr	r4, [pc, #48]	@ (8000748 <__libc_init_array+0x44>)
 8000718:	f000 f818 	bl	800074c <_init>
 800071c:	1b64      	subs	r4, r4, r5
 800071e:	10a4      	asrs	r4, r4, #2
 8000720:	2600      	movs	r6, #0
 8000722:	42a6      	cmp	r6, r4
 8000724:	d105      	bne.n	8000732 <__libc_init_array+0x2e>
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f855 3b04 	ldr.w	r3, [r5], #4
 800072c:	4798      	blx	r3
 800072e:	3601      	adds	r6, #1
 8000730:	e7ee      	b.n	8000710 <__libc_init_array+0xc>
 8000732:	f855 3b04 	ldr.w	r3, [r5], #4
 8000736:	4798      	blx	r3
 8000738:	3601      	adds	r6, #1
 800073a:	e7f2      	b.n	8000722 <__libc_init_array+0x1e>
 800073c:	08000764 	.word	0x08000764
 8000740:	08000764 	.word	0x08000764
 8000744:	08000764 	.word	0x08000764
 8000748:	08000768 	.word	0x08000768

0800074c <_init>:
 800074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074e:	bf00      	nop
 8000750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000752:	bc08      	pop	{r3}
 8000754:	469e      	mov	lr, r3
 8000756:	4770      	bx	lr

08000758 <_fini>:
 8000758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075a:	bf00      	nop
 800075c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800075e:	bc08      	pop	{r3}
 8000760:	469e      	mov	lr, r3
 8000762:	4770      	bx	lr
