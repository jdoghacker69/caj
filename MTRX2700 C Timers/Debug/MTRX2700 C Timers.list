
MTRX2700 C Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000548  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006dc  080006dc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006dc  080006dc  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080006dc  080006dc  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006dc  080006dc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006dc  080006dc  000016dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e0  080006e0  000016e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006e4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000006c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000070  20000070  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d3d  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000472  00000000  00000000  00002d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  000031e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b4  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e29  00000000  00000000  000033a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011e4  00000000  00000000  000181cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000727f9  00000000  00000000  000193b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008bbaa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002fc  00000000  00000000  0008bbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0008beec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006c4 	.word	0x080006c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080006c4 	.word	0x080006c4

080001d4 <enable_led_clock>:
// variables.
static uint8_t led_mask_pattern = 0b11111111;
static uint8_t led_mask_pattern_left = 0b11110000;
static uint8_t *led_output_register;

void enable_led_clock(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <enable_led_clock+0x1c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <enable_led_clock+0x1c>)
 80001de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001e2:	6153      	str	r3, [r2, #20]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000

080001f4 <initialise_leds>:

// enables the leds.
void initialise_leds(void) {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
    uint16_t *moder_upper = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001fa:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <initialise_leds+0x24>)
 80001fc:	607b      	str	r3, [r7, #4]
    *moder_upper = 0x5555;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000204:	801a      	strh	r2, [r3, #0]
    led_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000206:	4b05      	ldr	r3, [pc, #20]	@ (800021c <initialise_leds+0x28>)
 8000208:	4a05      	ldr	r2, [pc, #20]	@ (8000220 <initialise_leds+0x2c>)
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	48001002 	.word	0x48001002
 800021c:	20000020 	.word	0x20000020
 8000220:	48001015 	.word	0x48001015

08000224 <led_flash>:

// flashes a bit-mask of the leds.
void led_flash(void) {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
    *led_output_register = led_mask_pattern;
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <led_flash+0x38>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a0c      	ldr	r2, [pc, #48]	@ (8000260 <led_flash+0x3c>)
 8000230:	7812      	ldrb	r2, [r2, #0]
 8000232:	701a      	strb	r2, [r3, #0]
    for (volatile int i = 0; i < 100000; ++i);
 8000234:	2300      	movs	r3, #0
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	e002      	b.n	8000240 <led_flash+0x1c>
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3301      	adds	r3, #1
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a08      	ldr	r2, [pc, #32]	@ (8000264 <led_flash+0x40>)
 8000244:	4293      	cmp	r3, r2
 8000246:	ddf8      	ble.n	800023a <led_flash+0x16>
    *led_output_register = 0x00;
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <led_flash+0x38>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	20000020 	.word	0x20000020
 8000260:	20000000 	.word	0x20000000
 8000264:	0001869f 	.word	0x0001869f

08000268 <led_blink_sequence>:

void led_blink_sequence(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
    static uint8_t pattern = 0x01;
    *led_output_register = pattern;
 800026c:	4b0b      	ldr	r3, [pc, #44]	@ (800029c <led_blink_sequence+0x34>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a0b      	ldr	r2, [pc, #44]	@ (80002a0 <led_blink_sequence+0x38>)
 8000272:	7812      	ldrb	r2, [r2, #0]
 8000274:	701a      	strb	r2, [r3, #0]
    pattern <<= 1;
 8000276:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <led_blink_sequence+0x38>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <led_blink_sequence+0x38>)
 8000280:	701a      	strb	r2, [r3, #0]
    if (pattern == 0) pattern = 0x01;
 8000282:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <led_blink_sequence+0x38>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d102      	bne.n	8000290 <led_blink_sequence+0x28>
 800028a:	4b05      	ldr	r3, [pc, #20]	@ (80002a0 <led_blink_sequence+0x38>)
 800028c:	2201      	movs	r2, #1
 800028e:	701a      	strb	r2, [r3, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000020 	.word	0x20000020
 80002a0:	20000001 	.word	0x20000001

080002a4 <enable_core_clocks>:
#include "stm32f303xc.h"
#include "timer_module.h"
#include "led_module.h"

void enable_core_clocks(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80002a8:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <enable_core_clocks+0x1c>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a04      	ldr	r2, [pc, #16]	@ (80002c0 <enable_core_clocks+0x1c>)
 80002ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002b2:	6153      	str	r3, [r2, #20]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000

080002c4 <main>:

int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
    enable_core_clocks();
 80002c8:	f7ff ffec 	bl	80002a4 <enable_core_clocks>
    enable_led_clock();
 80002cc:	f7ff ff82 	bl	80001d4 <enable_led_clock>

    enable_periodic_clock();
 80002d0:	f000 f8aa 	bl	8000428 <enable_periodic_clock>
    enable_oneshot_clock();
 80002d4:	f000 f8b8 	bl	8000448 <enable_oneshot_clock>

    initialise_leds();
 80002d8:	f7ff ff8c 	bl	80001f4 <initialise_leds>

    // testing.
    timer_init(1000, led_blink_sequence);
 80002dc:	4905      	ldr	r1, [pc, #20]	@ (80002f4 <main+0x30>)
 80002de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e2:	f000 f8c1 	bl	8000468 <timer_init>
    timer_oneshot(4000, led_flash);
 80002e6:	4904      	ldr	r1, [pc, #16]	@ (80002f8 <main+0x34>)
 80002e8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80002ec:	f000 f900 	bl	80004f0 <timer_oneshot>

    while (1) {
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <main+0x2c>
 80002f4:	08000269 	.word	0x08000269
 80002f8:	08000225 	.word	0x08000225

080002fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	2b00      	cmp	r3, #0
 800030c:	db0b      	blt.n	8000326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f003 021f 	and.w	r2, r3, #31
 8000314:	4907      	ldr	r1, [pc, #28]	@ (8000334 <__NVIC_EnableIRQ+0x38>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	095b      	lsrs	r3, r3, #5
 800031c:	2001      	movs	r0, #1
 800031e:	fa00 f202 	lsl.w	r2, r0, r2
 8000322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000e100 	.word	0xe000e100

08000338 <trigger_prescaler>:
volatile uint32_t interval_ms = 0;
static void (*periodic_callback)(void) = 0;
static void (*oneshot_callback)(void) = 0;

// force updates the PSC and ARR settings.
static void trigger_prescaler(TIM_TypeDef *TIMx) {
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    TIMx->EGR |= TIM_EGR_UG;	// update the Update Generation bit.
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f043 0201 	orr.w	r2, r3, #1
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	615a      	str	r2, [r3, #20]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <enqueue_oneshot>:

// enqueues a one-shot event if buffer is not full.
uint32_t enqueue_oneshot(uint32_t delay_ms, void(*callback)(void)) {
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
	uint8_t next = (queue_tail + 1) % ONESHOT_QUEUE_SIZE;
 8000362:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <enqueue_oneshot+0x60>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	3301      	adds	r3, #1
 8000368:	425a      	negs	r2, r3
 800036a:	f003 0307 	and.w	r3, r3, #7
 800036e:	f002 0207 	and.w	r2, r2, #7
 8000372:	bf58      	it	pl
 8000374:	4253      	negpl	r3, r2
 8000376:	73fb      	strb	r3, [r7, #15]

	// buffer is full.
	if (next == queue_head) {
 8000378:	4b10      	ldr	r3, [pc, #64]	@ (80003bc <enqueue_oneshot+0x64>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	7bfa      	ldrb	r2, [r7, #15]
 800037e:	429a      	cmp	r2, r3
 8000380:	d102      	bne.n	8000388 <enqueue_oneshot+0x30>
		return -1;
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	e011      	b.n	80003ac <enqueue_oneshot+0x54>
	}

	// store event data at end of list and shift tail.
	oneshot_queue[queue_tail].delay_ms = delay_ms;
 8000388:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <enqueue_oneshot+0x60>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4619      	mov	r1, r3
 800038e:	4a0c      	ldr	r2, [pc, #48]	@ (80003c0 <enqueue_oneshot+0x68>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	oneshot_queue[queue_tail].callback = callback;
 8000396:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <enqueue_oneshot+0x60>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	4a09      	ldr	r2, [pc, #36]	@ (80003c0 <enqueue_oneshot+0x68>)
 800039c:	00db      	lsls	r3, r3, #3
 800039e:	4413      	add	r3, r2
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	605a      	str	r2, [r3, #4]
	queue_tail = next;
 80003a4:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <enqueue_oneshot+0x60>)
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	7013      	strb	r3, [r2, #0]

	return 0;
 80003aa:	2300      	movs	r3, #0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3714      	adds	r7, #20
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	20000065 	.word	0x20000065
 80003bc:	20000064 	.word	0x20000064
 80003c0:	20000024 	.word	0x20000024

080003c4 <dequeue_oneshot>:

// pushes to the next one-shot event if buffer is not empty.
uint32_t dequeue_oneshot(OneShotEvent *event) {
 80003c4:	b490      	push	{r4, r7}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	// buffer is empty.
	if (queue_head == queue_tail) {
 80003cc:	4b13      	ldr	r3, [pc, #76]	@ (800041c <dequeue_oneshot+0x58>)
 80003ce:	781a      	ldrb	r2, [r3, #0]
 80003d0:	4b13      	ldr	r3, [pc, #76]	@ (8000420 <dequeue_oneshot+0x5c>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d102      	bne.n	80003de <dequeue_oneshot+0x1a>
		return -1;
 80003d8:	f04f 33ff 	mov.w	r3, #4294967295
 80003dc:	e018      	b.n	8000410 <dequeue_oneshot+0x4c>
	}

	// push event to run and advance queue.
	*event = oneshot_queue[queue_head];
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <dequeue_oneshot+0x58>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000424 <dequeue_oneshot+0x60>)
 80003e6:	460c      	mov	r4, r1
 80003e8:	00db      	lsls	r3, r3, #3
 80003ea:	4413      	add	r3, r2
 80003ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80003f0:	e884 0003 	stmia.w	r4, {r0, r1}
	queue_head = (queue_head + 1) % ONESHOT_QUEUE_SIZE;
 80003f4:	4b09      	ldr	r3, [pc, #36]	@ (800041c <dequeue_oneshot+0x58>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	3301      	adds	r3, #1
 80003fa:	425a      	negs	r2, r3
 80003fc:	f003 0307 	and.w	r3, r3, #7
 8000400:	f002 0207 	and.w	r2, r2, #7
 8000404:	bf58      	it	pl
 8000406:	4253      	negpl	r3, r2
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4b04      	ldr	r3, [pc, #16]	@ (800041c <dequeue_oneshot+0x58>)
 800040c:	701a      	strb	r2, [r3, #0]

	return 0;
 800040e:	2300      	movs	r3, #0
}
 8000410:	4618      	mov	r0, r3
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bc90      	pop	{r4, r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000064 	.word	0x20000064
 8000420:	20000065 	.word	0x20000065
 8000424:	20000024 	.word	0x20000024

08000428 <enable_periodic_clock>:

void enable_periodic_clock(void) {
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800042c:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <enable_periodic_clock+0x1c>)
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <enable_periodic_clock+0x1c>)
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	61d3      	str	r3, [r2, #28]
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <enable_oneshot_clock>:

void enable_oneshot_clock(void) {
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800044c:	4b05      	ldr	r3, [pc, #20]	@ (8000464 <enable_oneshot_clock+0x1c>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	4a04      	ldr	r2, [pc, #16]	@ (8000464 <enable_oneshot_clock+0x1c>)
 8000452:	f043 0302 	orr.w	r3, r3, #2
 8000456:	61d3      	str	r3, [r2, #28]
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <timer_init>:

uint32_t get_timer_period(void) {
	return interval_ms;
}

void timer_init(uint32_t ms, void (*callback)(void)) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
    periodic_callback = callback;
 8000472:	4a1e      	ldr	r2, [pc, #120]	@ (80004ec <timer_init+0x84>)
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	6013      	str	r3, [r2, #0]

    TIM2->CR1 &= ~TIM_CR1_CEN;	// disables the counter.
 8000478:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000482:	f023 0301 	bic.w	r3, r3, #1
 8000486:	6013      	str	r3, [r2, #0]

    // timing.
    TIM2->PSC = 7999;			// PSC = 8MHz / (7999+1) = 1kHz.
 8000488:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800048c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000490:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = ms - 1;			// set time delay value.
 8000492:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3b01      	subs	r3, #1
 800049a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CNT = 0;				// reset timer counter value.
 800049c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	@ 0x24
    trigger_prescaler(TIM2);	// force updates PSC and ARR.
 80004a4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004a8:	f7ff ff46 	bl	8000338 <trigger_prescaler>

    // interrupts.
    TIM2->SR &= ~TIM_SR_UIF;	// clear active update interrupt flag.
 80004ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004b0:	691b      	ldr	r3, [r3, #16]
 80004b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004b6:	f023 0301 	bic.w	r3, r3, #1
 80004ba:	6113      	str	r3, [r2, #16]
    TIM2->DIER |= TIM_DIER_UIE;	// enable update interrupts.
 80004bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);	// enable TIM2 interrupts in NVIC.
 80004cc:	201c      	movs	r0, #28
 80004ce:	f7ff ff15 	bl	80002fc <__NVIC_EnableIRQ>

    TIM2->CR1 |= TIM_CR1_CEN;	// re-enable the counter.
 80004d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000068 	.word	0x20000068

080004f0 <timer_oneshot>:

void timer_oneshot(uint32_t ms, void(*callback)(void)) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
    // if one-shot event already active, queue as new item.
	if (oneshot_active) {
 80004fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000570 <timer_oneshot+0x80>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d004      	beq.n	800050c <timer_oneshot+0x1c>
        enqueue_oneshot(ms, callback);
 8000502:	6839      	ldr	r1, [r7, #0]
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff ff27 	bl	8000358 <enqueue_oneshot>
        return;
 800050a:	e02e      	b.n	800056a <timer_oneshot+0x7a>
    }

    oneshot_callback = callback;
 800050c:	4a19      	ldr	r2, [pc, #100]	@ (8000574 <timer_oneshot+0x84>)
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	6013      	str	r3, [r2, #0]
    oneshot_active = 1;
 8000512:	4b17      	ldr	r3, [pc, #92]	@ (8000570 <timer_oneshot+0x80>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]

    TIM3->CR1 &= ~TIM_CR1_CEN;	// disable the counter.
 8000518:	4b17      	ldr	r3, [pc, #92]	@ (8000578 <timer_oneshot+0x88>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a16      	ldr	r2, [pc, #88]	@ (8000578 <timer_oneshot+0x88>)
 800051e:	f023 0301 	bic.w	r3, r3, #1
 8000522:	6013      	str	r3, [r2, #0]

    // timing.
    TIM3->PSC = 7999;			// PSC = 1kHz.
 8000524:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <timer_oneshot+0x88>)
 8000526:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800052a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = ms - 1;			// set time delay value.
 800052c:	4a12      	ldr	r2, [pc, #72]	@ (8000578 <timer_oneshot+0x88>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM3->CNT = 0;				// reset timer counter value.
 8000534:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <timer_oneshot+0x88>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	@ 0x24
    trigger_prescaler(TIM3);	// force updates PSC and ARR.
 800053a:	480f      	ldr	r0, [pc, #60]	@ (8000578 <timer_oneshot+0x88>)
 800053c:	f7ff fefc 	bl	8000338 <trigger_prescaler>

    // interrupts.
    TIM3->SR &= ~TIM_SR_UIF;	// clear active update interrupt flags.
 8000540:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <timer_oneshot+0x88>)
 8000542:	691b      	ldr	r3, [r3, #16]
 8000544:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <timer_oneshot+0x88>)
 8000546:	f023 0301 	bic.w	r3, r3, #1
 800054a:	6113      	str	r3, [r2, #16]
    TIM3->DIER |= TIM_DIER_UIE;	// enable update interrupts.
 800054c:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <timer_oneshot+0x88>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	4a09      	ldr	r2, [pc, #36]	@ (8000578 <timer_oneshot+0x88>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM3_IRQn);	// enable TIM3 interrupts in NVIC.
 8000558:	201d      	movs	r0, #29
 800055a:	f7ff fecf 	bl	80002fc <__NVIC_EnableIRQ>

    TIM3->CR1 |= TIM_CR1_CEN;	// re-enable the counter.
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <timer_oneshot+0x88>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <timer_oneshot+0x88>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6013      	str	r3, [r2, #0]
}
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000066 	.word	0x20000066
 8000574:	2000006c 	.word	0x2000006c
 8000578:	40000400 	.word	0x40000400

0800057c <TIM2_IRQHandler>:

// TIM2 interrupt handler. handles periodic timer completion.
void TIM2_IRQHandler(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {	// check if update interrupt occurred.
 8000580:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000584:	691b      	ldr	r3, [r3, #16]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00e      	beq.n	80005ac <TIM2_IRQHandler+0x30>
        TIM2->SR &= ~TIM_SR_UIF;	// clear active update interrupt flags.
 800058e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000592:	691b      	ldr	r3, [r3, #16]
 8000594:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000598:	f023 0301 	bic.w	r3, r3, #1
 800059c:	6113      	str	r3, [r2, #16]

        if (periodic_callback) {
 800059e:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <TIM2_IRQHandler+0x34>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d002      	beq.n	80005ac <TIM2_IRQHandler+0x30>
            periodic_callback();	// call user-defined function.
 80005a6:	4b02      	ldr	r3, [pc, #8]	@ (80005b0 <TIM2_IRQHandler+0x34>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4798      	blx	r3
        }
    }
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000068 	.word	0x20000068

080005b4 <TIM3_IRQHandler>:

// TIM3 interrupt handler. handles one-shot timer completion.
void TIM3_IRQHandler(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {	// check if update interrupt occurred.
 80005ba:	4b18      	ldr	r3, [pc, #96]	@ (800061c <TIM3_IRQHandler+0x68>)
 80005bc:	691b      	ldr	r3, [r3, #16]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d025      	beq.n	8000612 <TIM3_IRQHandler+0x5e>
        TIM3->SR &= ~TIM_SR_UIF;	// clear active update interrupt flags.
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <TIM3_IRQHandler+0x68>)
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	4a14      	ldr	r2, [pc, #80]	@ (800061c <TIM3_IRQHandler+0x68>)
 80005cc:	f023 0301 	bic.w	r3, r3, #1
 80005d0:	6113      	str	r3, [r2, #16]

        TIM3->CR1 &= ~TIM_CR1_CEN;	// disable the counter.
 80005d2:	4b12      	ldr	r3, [pc, #72]	@ (800061c <TIM3_IRQHandler+0x68>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a11      	ldr	r2, [pc, #68]	@ (800061c <TIM3_IRQHandler+0x68>)
 80005d8:	f023 0301 	bic.w	r3, r3, #1
 80005dc:	6013      	str	r3, [r2, #0]
		oneshot_active = 0;			// note one-shot event completed.
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <TIM3_IRQHandler+0x6c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]

        if (oneshot_callback) {
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <TIM3_IRQHandler+0x70>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d005      	beq.n	80005f8 <TIM3_IRQHandler+0x44>
            oneshot_callback();		// call user-defined function.
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <TIM3_IRQHandler+0x70>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4798      	blx	r3
            oneshot_callback = 0;	// clear the function pointer.
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <TIM3_IRQHandler+0x70>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
        }

        // triggers next one-shot in queue if it exists.
        OneShotEvent next;
        if (dequeue_oneshot(&next) == 0) {
 80005f8:	463b      	mov	r3, r7
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fee2 	bl	80003c4 <dequeue_oneshot>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d105      	bne.n	8000612 <TIM3_IRQHandler+0x5e>
            timer_oneshot(next.delay_ms, next.callback);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4611      	mov	r1, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff6f 	bl	80004f0 <timer_oneshot>
        }
    }
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40000400 	.word	0x40000400
 8000620:	20000066 	.word	0x20000066
 8000624:	2000006c 	.word	0x2000006c

08000628 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000628:	480d      	ldr	r0, [pc, #52]	@ (8000660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800062c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480c      	ldr	r0, [pc, #48]	@ (8000664 <LoopForever+0x6>)
  ldr r1, =_edata
 8000632:	490d      	ldr	r1, [pc, #52]	@ (8000668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000634:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <LoopForever+0xe>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000648:	4c0a      	ldr	r4, [pc, #40]	@ (8000674 <LoopForever+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000656:	f000 f811 	bl	800067c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fe33 	bl	80002c4 <main>

0800065e <LoopForever>:

LoopForever:
    b LoopForever
 800065e:	e7fe      	b.n	800065e <LoopForever>
  ldr   r0, =_estack
 8000660:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800066c:	080006e4 	.word	0x080006e4
  ldr r2, =_sbss
 8000670:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000674:	20000070 	.word	0x20000070

08000678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_2_IRQHandler>
	...

0800067c <__libc_init_array>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	4d0d      	ldr	r5, [pc, #52]	@ (80006b4 <__libc_init_array+0x38>)
 8000680:	4c0d      	ldr	r4, [pc, #52]	@ (80006b8 <__libc_init_array+0x3c>)
 8000682:	1b64      	subs	r4, r4, r5
 8000684:	10a4      	asrs	r4, r4, #2
 8000686:	2600      	movs	r6, #0
 8000688:	42a6      	cmp	r6, r4
 800068a:	d109      	bne.n	80006a0 <__libc_init_array+0x24>
 800068c:	4d0b      	ldr	r5, [pc, #44]	@ (80006bc <__libc_init_array+0x40>)
 800068e:	4c0c      	ldr	r4, [pc, #48]	@ (80006c0 <__libc_init_array+0x44>)
 8000690:	f000 f818 	bl	80006c4 <_init>
 8000694:	1b64      	subs	r4, r4, r5
 8000696:	10a4      	asrs	r4, r4, #2
 8000698:	2600      	movs	r6, #0
 800069a:	42a6      	cmp	r6, r4
 800069c:	d105      	bne.n	80006aa <__libc_init_array+0x2e>
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a4:	4798      	blx	r3
 80006a6:	3601      	adds	r6, #1
 80006a8:	e7ee      	b.n	8000688 <__libc_init_array+0xc>
 80006aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ae:	4798      	blx	r3
 80006b0:	3601      	adds	r6, #1
 80006b2:	e7f2      	b.n	800069a <__libc_init_array+0x1e>
 80006b4:	080006dc 	.word	0x080006dc
 80006b8:	080006dc 	.word	0x080006dc
 80006bc:	080006dc 	.word	0x080006dc
 80006c0:	080006e0 	.word	0x080006e0

080006c4 <_init>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	bf00      	nop
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr

080006d0 <_fini>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	bf00      	nop
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr
